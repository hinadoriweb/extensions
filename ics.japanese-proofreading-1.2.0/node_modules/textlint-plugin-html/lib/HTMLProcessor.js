// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _htmlToAst = require("./html-to-ast");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var HTMLProcessor = /*#__PURE__*/function () {
  function HTMLProcessor(config) {
    _classCallCheck(this, HTMLProcessor);

    this.config = config;
    this.extensions = this.config.extensions ? this.config.extensions : [];
  }

  _createClass(HTMLProcessor, [{
    key: "availableExtensions",
    value: function availableExtensions() {
      return [".htm", ".html"].concat(this.extensions);
    }
  }, {
    key: "processor",
    value: function processor(ext) {
      return {
        preProcess: function preProcess(text, filePath) {
          return (0, _htmlToAst.parse)(text);
        },
        postProcess: function postProcess(messages, filePath) {
          return {
            messages: messages,
            filePath: filePath ? filePath : "<html>"
          };
        }
      };
    }
  }]);

  return HTMLProcessor;
}();

exports["default"] = HTMLProcessor;
//# sourceMappingURL=HTMLProcessor.js.map